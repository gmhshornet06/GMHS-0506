#include <kipr/botball.h>

void drive_forward(int inches);  //Drive Forward X inches
void drive_backwards(int inches2);  //Drive Backwards X inches
void turn_right(int degrees);  //Drive Right X degrees
void turn_left(int degrees);  // Drive Left X degrees
void lift_claw();  //Lift Claw
void lower_claw();  //Lower Claw
void open_claw();  //Open Claw
void close_claw();  //Close Claw
void open_plow();  //Open Plow
void close_plow();  //Close Plow
void stop_line(int colorvalue);  // Move forward, Stop robot when IR reflectance detects %colorvalue% 
void follow_line(int colorvalue);  // Robot moves when IR reflectance detects %colorvalue%, and corrects itself if not detecting %colorvalue%
void center_firetruck();  //Centers Robot on the Firetruck object (Firetruck is center of the camera)
void center_ambulance();  //Centers Robot on the Ambulance object (Ambulance is center of the camera)

int main()
{
  //119 second timer
  wait_for_light(0);
  shut_down_in(60);
  //lower_claw();
  //close_claw()
  //lift_claw();
  //Open Plow
  open_plow();
  //Move forward 28 inches
  drive_forward(37);
  close_plow();
  //Move backwards 5 inches
  drive_backwards(13);
  turn_left(90);
  open_plow();
  //Move forward 13.5 inches
  drive_forward(13.5);
  //turn_right(60);
  //open_plow();
  //Move forawrd 5 inches
  drive_forward(11);
  open_plow();
  close_claw();
  //If medical center is not burning;
  camera_open_black();
  while (digital(3) !=1)
  {
    camera_update();
    if(get_object_count(3) == 0)
    {
       drive_forward(10);
       open_claw();
       drive_backwards(5);
    }
    else
    {
      if(get_object_center_x(3,0)<80)
      {
         close_claw();
         turn_right(80);
         drive_forward(12);
         turn_left(90);
         drive_forward(4);
         open_claw();
         drive_backwards(10);
      }
    }
  }
  ao;
  return 0;
}

void drive_forward(int inches)
{
  motor(0,98.5);
  motor(2,92);
  msleep(190.95652173913043*inches);
  ao();
  cmpc(0);
}

void drive_backwards(int inches)
{
  motor(0,-97);
  motor(2,-92);
  msleep(190.95652173913043*inches);
  ao();
  cmpc(0);
}

void turn_right(int degrees)
{
    mav(0,-1000);
    mav(2,870);
    msleep(16*degrees);
    ao();
    cmpc(0);
}
 
void turn_left(int degrees)
{
    mav(0,1000);
    mav(2,-870);
    msleep(14.5*degrees);
    ao();
    cmpc(0);
}

void lift_claw()
{
  enable_servos();
  set_servo_position(0,1440);
  disable_servos();
}

void lower_claw()
{
  enable_servos();
  set_servo_position(0,330);
  disable_servos();
}

void open_claw()
{
  enable_servos();
  set_servo_position(1,1440);
  disable_servos();
}

void close_claw()
{
  enable_servos();
  set_servo_position(1,330);
  disable_servos();
}

void open_plow()
{
  enable_servos();
  set_servo_position(2,1044);
  msleep(100);
  disable_servos();
}

void close_plow()
{
  enable_servos();
  set_servo_position(2,700);
  msleep(100);
  disable_servos();
}

void stop_line(int colorvalue)
{
  while(analog(0)<colorvalue)
  {
    motor(0,500);
    motor(1,500);
  }
  ao();
}
  
void follow_line(int colorvalue)
{
  if(analog(0)<colorvalue)
  {
    motor(0,0);
    motor(2,20);
  }
  
  else
  {
    motor(0,20);
    motor(2,0);
  }
}

void center_firetruck()
{
  camera_open_black();
  while (digital(8) != 1)
  {
    camera_update();
    if (get_object_count(0)==0)
    {
      turn_right(30);
      msleep(10);
    }
    else
    {
      if (get_object_center_x(0,0)<70)
      {
        turn_left(15);
        msleep(10);
      }
      else
      {
        if (get_object_center_x(0,0)>90)
        {
          turn_right(15);
          msleep(10);
        }
      }
    }
  }
 }

void center_ambulance()
{
  camera_open_black();
  while (digital(8) != 1)
  {
    camera_update();
    if (get_object_count(1)==0)
    {
      turn_right(30);
      msleep(10);
    }
    else
    {
      if (get_object_center_x(1,0)<70)
      {
        turn_left(15);
        msleep(10);
      }
      else
      {
        if (get_object_center_x(1,0)>90)
        {
          turn_right(15);
          msleep(10);
        }
      }
    }
  }
}

  
