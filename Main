
#include <kipr/botball.h>

void drive_forward(int inches);  //Drive Forward X inches
void drive_backwards(int inches2);  //Drive Backwards X inches
void turn_right(int degrees);  //Drive Right X degrees
void turn_left(int degrees);  // Drive Left X degrees
void lift_claw();  //Lift Claw
void lower_claw();  //Lower Claw
void open_claw();  //Open Claw
void close_claw();  //Close Claw
void open_plow();  //Open Plow
void close_plow();  //Close Plow
void stop_line(int colorvalue);  // Move forward, Stop robot when IR reflectance detects %colorvalue% 
void follow_line(int colorvalue);  // Robot moves when IR reflectance detects %colorvalue%, and corrects itself if not detecting %colorvalue%
void center_firetruck();  //Centers Robot on the Firetruck object (Firetruck is center of the camera)
void center_people();  //Centers Robot on the people object (people is center of the camera)
void burning_building();
void calibrate_gyro();
void simple_drive_with_gyro();
int bias = 0;
int timebase = 0.2564102564102564;


#include <stdlib.h> 
#include <stdio.h> 
#include <string.h> 

int main()
{
  wait_for_light(0);
  shut_down_in(60);
    open_plow();
    calibrate_gyro();
    simple_drive_with_gyro(18*timebase);
    turn_left(90);
    simple_drive_with_gyro(21*timebase);
  //burning_building();
  drive_backwards(10);
  turn_right(180);
  simple_drive_with_gyro(47*timebase);
  close_plow();
  turn_right(90);
    simple_drive_with_gyro(15*timebase);
  turn_right(90);
  simple_drive_with_gyro(16*timebase);
  open_plow();
 drive_backwards(17);
//  center_people();
  
  return 0;
}

void drive_forward(int inches)
{
  motor(0,98.5);
  motor(2,92);
  msleep(190.95652173913043*inches);
  ao();
  cmpc(0);
}

void drive_backwards(int inches)
{
  motor(0,-97);
  motor(2,-92);
  msleep(190.95652173913043*inches);
  ao();
  cmpc(0);
}

void turn_right(int degrees)
{
    mav(0,-1000);
    mav(2,945);
    msleep(13*degrees);
    ao();
    cmpc(0);
}
 
void turn_left(int degrees)
{
    mav(0,1000);
    mav(2,-945);
    msleep(13*degrees);
    ao();
    cmpc(0);
}


void lift_claw()
{
  enable_servos();
  set_servo_position(0,1440);
  disable_servos();
}

void lower_claw()
{
  enable_servos();
  set_servo_position(0,330);
  disable_servos();
}

void open_claw()
{
  enable_servos();
  set_servo_position(1,1500);
  disable_servos();
}

void close_claw()
{
  enable_servos();
  set_servo_position(1,330);
  disable_servos();
}

void open_plow()
{
  enable_servos();
  set_servo_position(2,1144);
  msleep(100);
  disable_servos();
}

void close_plow()
{
  enable_servos();
  set_servo_position(2,700);
  msleep(100);
  disable_servos();
}

void stop_line(int colorvalue)
{
  while(analog(1)<colorvalue)
  {
    motor(0,500);
    motor(1,500);
  }
  ao();
}
  
void follow_line(int colorvalue)
{
  if(analog(1)<colorvalue)
  {
    motor(0,0);
    motor(2,20);
  }
  
  else
  {
    motor(0,20);
    motor(2,0);
  }
}

void center_firetruck()
{
  camera_open_black();
  while (digital(8) != 1)
  {
    camera_update();
    if (get_object_count(0)==0)
    {
      turn_right(30);
      msleep(10);
    }
    else
    {
      if (get_object_center_x(0,0)<70)
      {
        turn_left(15);
        msleep(10);
      }
      else
      {
        if (get_object_center_x(0,0)>90)
        {
          turn_right(15);
          msleep(10);
        }
      }
    }
  }
 }

void center_people()
{
  camera_open_black();
  while (digital(8) != 1)
  {
    camera_update();
    if (get_object_count(1)==0)
    {
      turn_right(30);
      msleep(10);
    }
    else
    {
      if (get_object_center_x(1,0)<70)
      {
        drive_forward(2);
        turn_left(15);
        msleep(10);
      }
      else
      {
        if (get_object_center_x(1,0)>90)
        {
          drive_forward(2);
          turn_right(15);
          msleep(10);
        }
      }
    }
  }
}
void burning_building()
{
	int iteration_count = 0;
	int update_errors = 0;
    camera_open_black();
    while (iteration_count<20)
  {
    if(!camera_update())
    {
        update_errors++;
        continue;
    }
    camera_update();
    printf("number of red is %d\n",get_object_count(3));    
    msleep(100);
    iteration_count++;
        
  }
    if(get_object_center_x(3,0) == 0)
    {
       drive_forward(10);
       open_plow();
       drive_backwards(10);
       turn_right(180);
    }
    else
    {
      if(get_object_center_x(3,0) > 0)
      {
         close_claw();
         turn_right(90);
         drive_forward(12);
         turn_left(90);
         drive_forward(4);
         open_plow();
         drive_backwards(10);
         close_plow();
         turn_left(90);
         drive_forward(12);
         open_plow();
      }
    }
}

  void calibrate_gyro()
{
    int i = 0;
    double avg = 0;
    while (i < 50)
    {
        avg += gyro_z();
        msleep(1);
        ++i;
    }
    bias = avg /50.0;
}
        

void simple_drive_with_gyro(int time)
{
    double startTime = seconds();
    double theta = 0;
    while (seconds() - startTime < time)
    {
        if(theta < 1000 && theta > -1000)
        {
            mav(0, 1000);
            mav(2, 1000);
        }
        else if(theta < 1000)
        {
            mav(0, 1000 + 100);
            mav(2, 1000 - 100);
        }
        else 
        {
            mav(0, 1000 - 100);
            mav(2, 1000 + 100);
        }
        msleep(10);
        theta += (gyro_z() - bias) * 10;
    }
  
}

