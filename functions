void drive_forward(inches)  //Drive Forward X inches
void drive_backwards(inches)  //Drive Backwards X inches
void turn_right(degrees)  //Drive Right X degrees
void turn_left(degrees)  // Drive Left X degrees
void lift_claw()  //Lift Claw
void lower_claw()  //Lower Claw
void open_claw()  //Open Claw
void close_claw()  //Close Claw
void open_plow()  //Open Plow
void close_plow()  //Close Plow
void stop_line(colorvalue)  // Move forward, Stop robot when IR reflectance detects %colorvalue% 
void follow_line(colorvalue)  // Robot moves when IR reflectance detects %colorvalue%, and corrects itself if not detecting %colorvalue%
void center_firetruck()  //Centers Robot on the Firetruck object (Firetruck is center of the camera)
void center_ambulance()  //Centers Robot on the Ambulance object (Ambulance is center of the camera)
void calibrate_gyro()
void backwards_gyro()
void forward_gyro()


void drive_forward(int inches)
{
  motor(0,98.5);
  motor(2,92);
  msleep(190.95652173913043*inches);
  ao();
  cmpc(0);
}

void drive_backwards(int inches)
{
  motor(0,-97);
  motor(2,-92);
  msleep(190.95652173913043*inches);
  ao();
  cmpc(0);
}

void turn_right(int targetTheta)
{
    double theta = 0;
    mav(0, -1000);
    mav(2, 1000);

    while(theta < targetTheta)
    {
        msleep(10);
        theta += abs(gyro_z() - bias) * 10;
    }
    mav(0, 0);
    mav(2, 0);
}
  
 
void turn_left(int targetTheta)
{
    double theta = 0;
    mav(0, 1000);
    mav(2, -1000);

    while(theta < targetTheta)
    {
        msleep(10);
        theta += abs(gyro_z() - bias) * 10;
    }
    mav(0, 0);
    mav(2, 0);
}

void open_plow()
{
  enable_servos();
  set_servo_position(2,1144);
  msleep(100);
  disable_servos();
}

void close_plow()
{
  enable_servos();
  set_servo_position(2,1000);
  msleep(100);
  disable_servos();
}

void close_plow_people()
{
  enable_servos();
  set_servo_position(2,738);
  msleep(100);
  disable_servos();
}

void stop_line(int colorvalue)
{
  while(analog(1)<colorvalue)
  {
    motor(0,500);
    motor(1,500);
  }
  ao();
}
  
void follow_line(int colorvalue, double SeGunDos)
{
    double startTime = seconds();
    while (seconds() - startTime < SeGunDos)
    {
  if(analog(1)<colorvalue)
  {
    motor(0,30);
    motor(2,60);
  }
    else
    {
        motor(0,60);
        motor(2,30);
    }
    }
    ao();
}

void center_firetruck()
{
  camera_open_black();
  while (digital(8) != 1)
  {
    camera_update();
    if (get_object_count(0)==0)
    {
      turn_right(30);
      msleep(10);
    }
    else
    {
      if (get_object_center_x(0,0)<70)
      {
        turn_left(15);
        msleep(10);
      }
      else
      {
        if (get_object_center_x(0,0)>90)
        {
          turn_right(15);
          msleep(10);
        }
      }
    }
  }
 }

void center_people()
{
  camera_open_black();
  while (digital(8) != 1)
  {
    camera_update();
    if (get_object_count(1)==0)
    {
      turn_right(30);
      msleep(10);
    }
    else
    {
      if (get_object_center_x(1,0)<70)
      {
        drive_forward(2);
        turn_left(15);
        msleep(10);
      }
      else
      {
        if (get_object_center_x(1,0)>90)
        {
          drive_forward(2);
          turn_right(15);
          msleep(10);
        }
      }
    }
  }
}
void burning_building()
{
	int iteration_count = 0;
	int update_errors = 0;
    camera_open_black();
    while (iteration_count<20)
  {
    if(!camera_update())
    {
        update_errors++;
        continue;
    }
    camera_update();
    printf("number of red is %d\n",get_object_count(3));    
    msleep(100);
    iteration_count++;
        
  }
    if(get_object_center_x(3,0) == 0)
    {
        calibrate_gyro();
       simple_drive_with_gyro(10*0.2564102564102564);
       open_plow();
       calibrate_gyro();
       backwards_gyro(10*0.2564102564102564);
        calibrate_gyro();
       turn_right(1200000);
       calibrate_gyro();
       simple_drive_with_gyro(10*0.2564102564102564);
       calibrate_gyro();
       turn_right(600000);
       
    }
    else
    {
      if(get_object_center_x(3,0) > 0)
      {
         close_plow();
          calibrate_gyro();
         turn_right(590000);
          calibrate_gyro();
         simple_drive_with_gyro(6*0.2564102564102564);
          calibrate_gyro();
         turn_left(350000);
          calibrate_gyro();
         simple_drive_with_gyro(4*0.2564102564102564);
         open_plow();
          ao();
          msleep(800);
          calibrate_gyro();
         backwards_gyro(14*0.2564102564102564);
         close_plow();
          calibrate_gyro();
          turn_right(300000);
  		  ao();
      }
    }
}

  void calibrate_gyro()
{
    int i = 0;
    double avg = 0;
    msleep(1000);
    while (i < 50)
    {
        avg += gyro_z();
        msleep(1);
        ++i;
    }
    bias = avg /50.0;
}
        

void simple_drive_with_gyro(double time)
{
    double startTime = seconds();
    double theta = 0;
    while (seconds() - startTime < time)
    {
        if(theta < 1000 && theta > -1000)
        {
            mav(0, 1000);
            mav(2, 1000);
        }
        else if(theta < 1000)
        {
            mav(0, 1000 + 100);
            mav(2, 1000 - 100);
        }
        else 
        {
            mav(0, 1000 - 100);
            mav(2, 1000 + 100);
        }
        msleep(10);
        theta += (gyro_z() - bias) * 10;
    }
  
}

void backwards_gyro(double time)
{
    double startTime = seconds();
    double theta = 0;
    while (seconds() - startTime < time)
    {
        if(theta < 1000 && theta > -1000)
        {
            mav(0, -900);
            mav(2, -900);
        }
        else if(theta > 1000)
        {
            mav(0, -900 - 100);
            mav(2, -900 + 100);
        }
        else 
        {
            mav(0, -900 + 100);
            mav(2, -900 - 100);
        }
        msleep(10);
        theta += (gyro_z() - bias) * 10;
    }
  
}
